[{"id":"content:0.index.md","path":"/","dir":"","title":"YAFLA - Yet Anothe Factorio Library Attempt","description":"","keywords":[],"body":"    YAFLA   Yet Another Factorio Library Attempt"},{"id":"content:0.Start:0.index.md","path":"/start","dir":"","title":"Work enviroment","description":"","keywords":["Something Something Title"],"body":"   This library is still in development, if you fine any bug please report them on the   Mod portal .  Something Something Title"},{"id":"content:1.guide:0.index.md","path":"/guide","dir":"","title":"Components","description":"Discover every component you can use in your content.","keywords":["<Alert />","<Badge />","<BlockHero />","<ButtonLink />","<Callout />","<Card />","<CardGrid />","<CodeGroup />","<CodeBlock />","<CopyButton />","<Icon />","<List />","<Sandbox />","<Terminal />","<VideoPlayer />"],"body":"  Components  Discover every component you can use in your content.   <Alert />     Check out an   info  alert with   code  and a   link .   Check out a   success  alert with   code  and a   link .   Check out a   warning  alert with   code  and a   link .   Check out a   danger  alert with   code  and a   link .     ::alert{type=\"info\"}\n   Check out an   **info**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"success\"}\n   Check out a   **success**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"warning\"}\n   Check out a   **warning**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n   \n   ::alert{type=\"danger\"}\n   Check out a   **danger**   alert with   `code`   and a [  link  ](  /  ).\n   ::\n     <Badge />   <Badge />  support same types as   <Alert /> .     v1.2  Deprecated   Not found!     :badge[  v1.2  ]\n   \n   :badge[  Deprecated  ]{type=\"warning\"}\n   \n   ::badge{type=\"danger\"}\n   Not found!\n   ::\n     <BlockHero />      Document-driven framework   Docus reconciles content creators and developers by offering to both the best tools to create and scale content-based websites.     ::block-hero\n   ---\n   cta:\n     -   Get started\n     -   /get-started\n   secondary:\n     -   Open on GitHub â†’\n     -   https://github.com/nuxtlabs/docus\n   snippet: npx nuxi@latest init docus-app -t nuxtlabs/docus-starter\n   ---\n   #title\n   Document-driven framework\n   \n   #description\n   Docus reconciles content creators and developers by offering to both the best tools to create and scale content-based websites.\n   ::\n     <ButtonLink />    Play on StackBlitz     :button-link[Play on StackBlitz]{icon=\"IconStackBlitz\" href=\"https://stackblitz.com/github/nuxtlabs/docus-starter\" blank}\n     <Callout />   <Callout />  support same types as   <Alert /> .      This is a callout! Click me to open.   This is the content of the callout.    This is a callout! Click me to open.   This is the content of the callout.     ::callout\n   #summary\n   This is a callout! Click me to open.\n   \n   #content\n   This is the content of the callout.\n   ::\n    \n   ::callout{type=\"warning\"}\n   #summary\n   This is a callout! Click me to open.\n   \n   #content\n   This is the content of the callout.\n   ::\n     <Card />      Nuxt Architecture.   Based on   Nuxt 3  and   Nuxt Content .   \nUse Nuxt to build a static site, or a serverless app.      ::card{icon=\"logos:nuxt-icon\"}\n    #title\n    Nuxt Architecture.\n    #description\n    Based on   **Nuxt 3**   and   **Nuxt Content**  . :br\n    Use Nuxt to build a static site, or a serverless app.\n    ::\n     <CardGrid />      What's included?      Nuxt Architecture.   Harness the full power of Nuxt and the Nuxt ecosystem.    Vue Components.   Use built-in components (or your own!) inside your content.    Write Markdown.   Enjoy the ease and simplicity of Markdown and discover MDC syntax.     ::card-grid\n   #title\n   What's included\n   \n   #root\n   :ellipsis\n   \n   #default\n     ::card\n     #title\n     Nuxt Architecture.\n     #description\n     Harness the full power of Nuxt and the Nuxt ecosystem.\n     ::\n     ::card\n     #title\n     Vue Components.\n     #description\n     Use built-in components (or your own!) inside your content.\n     ::\n     ::card\n     #title\n     Write Markdown.\n     #description\n     Enjoy the ease and simplicity of Markdown and discover MDC syntax.\n     ::\n   ::\n     <CodeGroup />  This component uses   slots  to create a tab panel of your code examples or preview.        yarn   add   docus\n     npm   install   docus\n     ::code-group\n     ```bash [Yarn]\n     yarn   add   docus\n     ```\n     ```bash [NPM]\n     npm   install   docus\n     ```\n   ::\n     <CodeBlock />  To be used inside a   <CodeGroup />  component to display a preview of some rendered code.     Hello World!     /* Added as a child of   `<CodeGroup />`   */\n   \n   ::code-block{label=\"Preview\" preview}\n     ::badge\n     Hello World!\n     ::\n   ::\n     <CopyButton />        :copy-button{content=\"hey!\"}\n     <Icon />  Icon component gives you access to all   100,000+  icons from   icones.js.org .          :icon{name=\"logos:nuxt-icon\"}\n   :icon{name=\"logos:vue\"}\n   :icon{name=\"logos:nuxt-icon\"}\n     <List />       Important  Always    Amazing  Congrats    Do you know?  You can also do this    Be careful  Use with precautions    Drinking too much  Driving drunk     ::list{type=\"primary\"}\n   -   **Important**\n   -   Always\n   ::\n   \n   ::list{type=\"success\"}\n   -   Amazing\n   -   Congrats\n   ::\n   \n   ::list{type=\"info\"}\n   -   Do you know?\n   -   You can also do this\n   ::\n   \n   ::list{type=\"warning\"}\n   -   Be careful\n   -   Use with precautions\n   ::\n   \n   ::list{type=\"danger\"}\n   -   Drinking too much\n   -   Driving drunk\n   ::\n    <Sandbox />  Embed CodeSandbox/StackBlitz easily in your documentation with great performances.  Using the   IntersectionObserver  to load when visible in the viewport.        :sandbox{src=\"https://codesandbox.io/embed/nuxt-content-l164h?hidenavigation=1&theme=dark\"}\n     <Terminal />        :terminal{content=\"nuxi build\"}\n     <VideoPlayer />         ::div\n     :video-player{src=\"https://www.youtube.com/watch?v=o9e12WbKrd8\"}\n   ::\n   html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"},{"id":"content:2.Scripts:0.extended_table.md","path":"/scripts/extended_table","dir":"scripts","title":"Extended table","description":"","keywords":["Include in your script","is_empty","is_present","slice"],"body":"   Include in your script   local ext_table = require(\"__yafla__/scripts/extended_table.lua\")\n   is_empty   input:    table   output:    bool  v0.1.0  This function take in input a table and tells you if the table is empty or not!  Compared to   #Table > 0  This gives you   false  it you have a table that work as a   dict\\hashmap      local   my_empty_table   =   {}\n   local   my_not_empty_table   =   {something  =  10  }\n   local   my_not_empty_list   =   {  1  ,  2  ,  3  }\n   \n   ext_table.  is_empty  (my_table)   ->   true\n   ext_table.  is_empty  (my_not_empty_table)   ->   false\n   ext_table.  is_empty  (my_not_empty_list)   ->   false\n     function   extended_table  .  is_empty  (tbl)\n       if   #  tbl   >   0   then\n           return   false\n       end\n   \n       for   _, _   in   pairs  (tbl)   do\n           return   false\n       end\n   \n       return   true\n     end\n   is_present   input:    table ,   any   output:    bool  v0.1.0  This function take in input a table and a value and tells you if the element is present in the table!  This just avoid you to write the for loop each time...      local   my_table   =   {  1  ,  2  ,  3  }\n   \n   ext_table.  is_present  (my_table,   2  )   ->   true\n   ext_table.  is_present  (my_table,   4  )   ->   false\n     function   extended_table  .  is_present  (tbl, element)\n     for   _, v   in   pairs  (tbl)   do\n         if   v   ==   element   then\n             return   true\n         end\n     end\n     return   false\n   end\n   slice   input:    table ,   number|nil=1 ,   number|nil=#table ,   number|nil=1   output:    table  v0.1.0  This function take in input a table, first element of the slice, last element of the slice, step of the slice.  This just avoid you to write the for loop each time...      local   my_table   =   {  1  ,  2  ,  3  ,  4  ,  5  }\n   \n   ext_table.  slice  (my_table,   2  ,  4  )   ->   {  2  ,  3  ,  4  }\n   ext_table.  slice  (my_table,   3  ,  3  )   ->   {  3  }\n     function   extended_table  .  slice  (tbl, first, last, step)\n     local   sliced   =   {}\n   \n     for   i   =   first   or   1  , last   or   #  tbl, step   or   1   do\n         sliced[  #  sliced  +  1  ]   =   tbl[i]\n     end\n   \n     return   sliced\n   end\n    \nThis function does   NOT  check if the input parameters are correct, so if you insert value that does not match yout table it will crash.  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"},{"id":"content:2.Scripts:1.gui:0.introduction.md","path":"/scripts/gui/introduction","dir":"gui","title":"Introduction","description":"","keywords":[],"body":""},{"id":"content:2.Scripts:1.gui:1.gui_builder.md","path":"/scripts/gui/gui_builder","dir":"gui","title":"Gui builder","description":"","keywords":[],"body":""},{"id":"content:2.Scripts:1.gui:2.gui_components.md","path":"/scripts/gui/gui_components","dir":"gui","title":"Gui components","description":"","keywords":[],"body":""},{"id":"content:2.Scripts:2.actions.md","path":"/scripts/actions","dir":"scripts","title":"Actions","description":"","keywords":[],"body":""},{"id":"content:2.Table:0.setup.md","path":"/table/setup","dir":"table","title":"Setup","description":"","keywords":[],"body":""},{"id":"content:3.Prototypes:0.styles.md","path":"/prototypes/styles","dir":"prototypes","title":"Styles","description":"","keywords":[],"body":""}]